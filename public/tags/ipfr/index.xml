<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ipfr | D. Kyle Ward</title>
    <link>/tags/ipfr/</link>
      <atom:link href="/tags/ipfr/index.xml" rel="self" type="application/rss+xml" />
    <description>ipfr</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Wed, 28 Aug 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>ipfr</title>
      <link>/tags/ipfr/</link>
    </image>
    
    <item>
      <title>Introducing the ipfr package</title>
      <link>/post/ipfr/2019-08-27-ipfr/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/ipfr/2019-08-27-ipfr/</guid>
      <description>


&lt;p&gt;Iâ€™m happy to announce that the &lt;a href=&#34;https://github.com/dkyleward/ipfr&#34;&gt;ipfr package&lt;/a&gt;
is available on CRAN! The goal of this package is to make survey expansion,
matrix balancing, and population synthesis easier.&lt;/p&gt;
&lt;p&gt;A basic use case is the task of balancing a matrix to row and column targets:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ipfr)
library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtx &amp;lt;- matrix(data = runif(9), nrow = 3, ncol = 3)
row_targets &amp;lt;- c(3, 4, 5)
column_targets &amp;lt;- c(5, 4, 3)
result &amp;lt;- ipu_matrix(mtx, row_targets, column_targets)

rowSums(result)
#&amp;gt; [1] 3.000001 4.000015 4.999985
colSums(result)
#&amp;gt; [1] 5 4 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The example below creates a simple survey and expands it to meet known
population targets. Each row in the &lt;code&gt;survey&lt;/code&gt; data frame represents a household
and contains information on the number of household members (&lt;code&gt;size&lt;/code&gt;) and number
of &lt;code&gt;autos&lt;/code&gt;. The &lt;code&gt;targets&lt;/code&gt; list contains population targets that the survey
expansion should match. For example, there should be a total of 75 households
with 1 person.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;survey &amp;lt;- tibble(
  size = c(1, 2, 1, 1),
  autos = c(0, 2, 2, 1),
  weight = 1
)
targets &amp;lt;- list()
targets$size &amp;lt;- tibble(
  `1` = 75,
  `2` = 25
)
targets$autos &amp;lt;- tibble(
  `0` = 25,
  `1` = 50,
  `2` = 25
)
result &amp;lt;- ipu(survey, targets)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The package also supports a number of advanced features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Match to household- and person-level targets simultaneously&lt;/li&gt;
&lt;li&gt;View and restrict the distribution of resulting weights&lt;/li&gt;
&lt;li&gt;Control by geography&lt;/li&gt;
&lt;li&gt;Handle target agreement and importance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, the resulting weight table can be used to easily create a synthetic
population:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;synthesize(result$weight_tbl)
#&amp;gt; # A tibble: 100 x 4
#&amp;gt;    new_id    id  size autos
#&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt;  1      1     1     1     0
#&amp;gt;  2      2     4     1     1
#&amp;gt;  3      3     1     1     0
#&amp;gt;  4      4     2     2     2
#&amp;gt;  5      5     4     1     1
#&amp;gt;  6      6     4     1     1
#&amp;gt;  7      7     2     2     2
#&amp;gt;  8      8     2     2     2
#&amp;gt;  9      9     4     1     1
#&amp;gt; 10     10     4     1     1
#&amp;gt; # ... with 90 more rows&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
